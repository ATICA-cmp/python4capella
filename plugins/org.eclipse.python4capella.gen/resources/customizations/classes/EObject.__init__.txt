    @staticmethod
    def get_class(e_object):
        try:
            res = getattr(sys.modules["__main__"], e_object.eClass().getName())
        except AttributeError:
            res = None
        
        if res == LogicalComponent:
            if e_object.isActor():
                res = LogicalActor
            elif is_system(e_object):
                res = LogicalSystem
        
        if res == PhysicalComponent:
            if e_object.isActor():
                res = PhysicalActor
            elif is_system(e_object):
                res = PhysicalSystem
            else:
                if e_object.getNature().getName() == "UNSET":
                    res = PhysicalComponent
                elif e_object.getNature().getName() == "BEHAVIOR":
                    res = BehaviorPC
                elif e_object.getNature().getName() == "NODE":
                    res = NodePC
                else:
                    raise AttributeError("Passed physical component has unexpected nature.")
        
        if res == None and e_object.eClass().getName() == "Entity":
            if e_object.isActor():
                res = OperationalActor
            else:
                res = OperationalEntity
        
        if res == None and e_object.eClass().getName() == "CatalogElement":
            if e_object.getKind().getName() == "REC":
                res = REC
            elif e_object.getKind().getName() == "RPL":
                res = RPL
            else:
                raise AttributeError("Passed catalog element has unexpected kind.")
        
        if res == None and e_object.eClass().getName() == "InteractionOperand":
            res = Operand

        if res == None and e_object.eClass().getName() == "Service":
            res = Operation

        if res == None and e_object.eClass().getName() == "SystemComponent":
            if e_object.isActor():
                res = SystemActor
            elif is_system(e_object):
                res = System

        if res == None and e_object.eClass().getName() in ["BooleanPropertyValue", "EnumerationPropertyValue", "FloatPropertyValue", "IntegerPropertyValue", "StringPropertyValue"]:
            res = PropertyValue

        if res == None and e_object.eClass().getName() in ["ChoicePseudoState", "DeepHistoryPseudoState", "EntryPointPseudoState", "ExitPointPseudoState", "ForkPseudoState", "InitialPseudoState", "JoinPseudoState", "ShallowHistoryPseudoState", "TerminatePseudoState", "FinalState"]:
            res = Pseudostate

        return res

